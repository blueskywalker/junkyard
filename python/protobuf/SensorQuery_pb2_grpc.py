# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import SensorQuery_pb2 as SensorQuery__pb2


class SensorQueryStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.listSensorData = channel.unary_stream(
        '/datalake.SensorQuery/listSensorData',
        request_serializer=SensorQuery__pb2.QueryObject.SerializeToString,
        response_deserializer=SensorQuery__pb2.RespObject.FromString,
        )


class SensorQueryServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def listSensorData(self, request, context):
    """Sends a list of RespObject
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SensorQueryServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'listSensorData': grpc.unary_stream_rpc_method_handler(
          servicer.listSensorData,
          request_deserializer=SensorQuery__pb2.QueryObject.FromString,
          response_serializer=SensorQuery__pb2.RespObject.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'datalake.SensorQuery', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
