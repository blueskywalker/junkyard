# Copyright 2013 Cloudera Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Application configuration file in HOCON format (Human-Optimized Config Object Notation).
# HOCON syntax is defined at http://github.com/typesafehub/config/blob/master/HOCON.md
# and also used by Akka (http://www.akka.io) and Play (http://www.playframework.org/).
# For more examples see http://doc.akka.io/docs/akka/2.1.2/general/configuration.html

# morphline.conf example file
# this is a comment

# Specify server locations in a SOLR_LOCATOR variable; used later in variable substitutions:

# Specify an array of one or more morphlines, each of which defines an ETL
# transformation chain. A morphline consists of one or more (potentially
# nested) commands. A morphline is a way to consume records (e.g. Flume events,
# HDFS files or blocks), turn them into a stream of records, and pipe the stream
# of records through a set of easily configurable transformations on it's way to
# Solr.
morphlines : [
  {
    # Name used to identify a morphline. E.g. used if there are multiple morphlines in a
    # morphline config file
    id : post-morphline

    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this morphline.
    importCommands : ["org.kitesdk.**", "org.apache.solr.**"]

    commands : [
      {
        # Parse Avro container file and emit a record for each avro object
        readAvroContainer {
          # Optionally, require the input record to match one of these MIME types:
          # supportedMimeTypes : [avro/binary]

          # Optionally, use a custom Avro schema in JSON format inline:
          # readerSchemaString : """<json can go here>"""

          # Optionally, use a custom Avro schema file in JSON format:
          # readerSchemaFile : /path/to/syslog.avsc
        }
      }

      {
        extractAvroPaths {
          flatten : false
          paths : {
        id: /id
        createDate: /createDate
        updateDate: /updateDate
        utcOffset: /utcOffset
        timeZone: /timeZone
        contentType: /contentType
        lang: /lang
        geo: /geo
        userLocation: /userLocation
        country: /country
        countryCode: /countryCode
        province: /province
        provinceCode: /provinceCode
        city: /city
        zipCode: /zipCode
        actorId: /actorId
        actorName: /actorName
        actorScreenName: /actorScreenName
        age: /age
        gender: /gender
        refDocId: /refDocId
        refUserId: /refUserId
        refScreenName: /refScreenName
        shared: /shared
        sharedCount: /sharedCount
        accessCount: /accessCount
        commentCount: /commentCount
        favoriteCount: /favoriteCount
        likeCount: /likeCount
        dislikeCount: /dislikeCount
        fanCount: /fanCount
        followerCount: /followerCount
        followingCount: /followingCount
        friendCount: /friendCount
        influenceScore: /influenceScore
        profanityScore: /profanityScore
        spamScore: /spamScore
        urls: /urls
        hashTags: /hashTags
        msgTags: /msgTags
        categories: /categories
        groupTitle: /groupTitle
        locale: /locale
        topics: /topics
        deleted: /deleted
        actorVerified: /actorVerified
        truncated: /truncated
        postCount: /postCount
        placeName: /placeName
        placeFullName: /placeFullName
        dataSource: /dataSource
        postType: /postType
        docId: /docId
          }
        }
      }

      {
    java  {
        imports : """
            import java.util.*;
            import org.apache.avro.generic.GenericRecord;
            import org.kitesdk.morphline.base.Fields;
            import com.mwired.grid.commons.primitive.*;
            """
        code: """
            GenericRecord root = (GenericRecord) record.getFirstValue(Fields.ATTACHMENT_BODY);
            List coordinates = (List) root.get("coordinates");
            if(coordinates != null && coordinates.size() == 2) {
                record.put("coordinates_0_coordinate",coordinates.get(0));
                record.put("coordinates_1_coordinate",coordinates.get(1));
            }

            if(root.get("contents")!=null)
                record.put("text",root.get("contents"));
            if(root.get("subject")!=null)
                record.put("text",root.get("subject"));
            if(root.get("title")!=null)
                record.put("text",root.get("title"));

            List<String> langA  = record.get("lang");
                if (langA.size()==0 || langA.get(0).equals(Language.UNKNOWN.name())) {
                record.replaceValues("lang",Language.XX.name());
            }
            List<String> countryCodeA = record.get("countryCode");

            if (countryCodeA.size() == 0) {
                record.replaceValues("countryCode",Country.XX.name());
            } else {
                String countryCode = countryCodeA.get(0);
                List<String> provinceA = record.get("province");
                String province = provinceA.size() > 0 ? provinceA.get(0) : null;
                            try {
                    if (province!=null && province.length() > 0) {
                        if (countryCode.equals(Country.US.name())) {
                        UsaState state =UsaState.match(province);
                        record.replaceValues("province",(state == null) ? UsaState.XX.name() : state.name());
                        } else if (countryCode.equals(Country.CA.name())) {
                        CanadaProvince state = CanadaProvince.match(province);
                        record.replaceValues("province",(state== null) ? CanadaProvince.XX.name() : state.name());
                        } else if (countryCode.equals(Country.AU.name())) {
                        AustraliaState state = AustraliaState.match(province);
                        record.replaceValues("province",(state == null) ? AustraliaState.XX.name() : state.name());
                        }
                    }
                } catch ( Exception ex) {
                ;;
                }
            }
            return child.process(record);
        """
    }
      }
      {
        sanitizeUnknownSolrFields {
          solrLocator : {
          }
        }
      }
      {
    loadSolr {
        solrLocator : {
        }
    }
      }
    ]
  }
]
